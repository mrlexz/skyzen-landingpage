<krpano>
 <!--
 include VR support - http://krpano.com/plugins/webvr/ 
-->
<include url="%SWFPATH%/plugins/webvr.xml" devices="html5"/>
 <!--
 overwrite some settings from the webvr.xml for the skin integration 
-->
<plugin name="webvr" keep="true" devices="html5" url_="%SWFPATH%/plugins/webvr.js" multireslock___.desktop="true" multireslock___.mobile.or.tablet="false" mobilevr_support="true" mobilevr_fake_support="true" onavailable="removelayer(webvr_enterbutton); webvr_onavailable();" onentervr2="webvr_onentervr(); webvr_setup(); skin_reloadscene_webvr();" onexitvr2="webvr_onexitvr(); webvr_setup(); skin_reloadscene_webvr();" onentervr="webvr_onentervr(); webvr_setup();" onexitvr="webvr_onexitvr(); webvr_setup();"/>
<events name="webvr" keep="true" onnewscene="" webvr_onavailable="" webvr_onunavailable="" webvr_onunknowndevice="" webvr_onentervr="" webvr_onexitvr=" delayedcall(webvr_onexitvr, 0.5, showControls(true); );"/>
 <!--  webvr button style (adjust to match skin style)  -->
<style name="webvr_button_style" border="false" roundedge="calc:1.0" backgroundcolor="0x222222" backgroundalpha="0.7" shadow="0.01" shadowrange="10.0" shadowangle="90.0" shadowcolor="0xffffff" shadowalpha="0.50" css="font-family:Arial; font-size:14px; color:0xffffff; text-align:center"/>
 <!--
 show a 'rotate the device' info when the mobile device is in portrait orientation in VR mode 
-->
<layer name="webvr_rotate_to_landscape_request" keep="true" vr="true" devices="mobile" url="images/rotate_device.png" scale="0.5" align="top" edge="center" y="28%" autoalpha="true" alpha="0.0" enabled="false"/>
<events name="webvr_events" keep="true" devices="html5" onxmlcomplete="webvr_set_startup_view()" onresize.mobile="webvr_act_as_gyro_in_portrait_mode();" onloadcomplete="delayedcall(0.5, if(webvr.isenabled AND scene.count GT 1, set(hotspot[webvr_prev_scene].visible,true); set(hotspot[webvr_next_scene].visible,true); ); );" onviewchange="" onkeydown="if(webvr AND webvr.isenabled AND keycode==32, webvr.resetSensor() );" onmousedown="if(webvr AND webvr.isenabled, webvr_showbuttons() );" onexitfullscreen="vr_setup_close();"/>
<action name="webvr_set_startup_view">
if((webvr.isenabled OR plugin[skin_gyro].enabled) AND skin_settings.webvr_gyro_keeplookingdirection == false, skin_lookat( get(xml.view.hlookat) ); );
</action>
<action name="webvr_setup">
if(webvr.isenabled, copy(loadscene_flags_backup, skin_settings.loadscene_flags); set(skin_settings.loadscene_flags, MERGE|KEEPVIEW|KEEPMOVING|NOPREVIEW); webvr_act_as_gyro_in_portrait_mode(true); if(scene.count GT 1, set(hotspot[webvr_prev_scene].visible, true); set(hotspot[webvr_next_scene].visible, true); set(events[webvr_events].onviewchange, webvr_menu_following()); ); , if(loadscene_flags_backup !== null, copy(skin_settings.loadscene_flags, loadscene_flags_backup)); tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 0.0); set(hotspot[webvr_prev_scene].visible, false); set(hotspot[webvr_next_scene].visible, false); set(events[webvr_events].onviewchange, null); );
</action>
<action name="webvr_act_as_gyro_in_portrait_mode">
if(device.mobile AND webvr.isenabled, div(aspect, stagewidth, stageheight); if(aspect != lastaspect OR '%1' == 'true', copy(lastaspect, aspect); if(stagewidth GT stageheight,
<!--
 landscape orientation - use stereo rendering and a direct/fast gyro sensor mode 
-->
set(display.stereo, true); set(webvr.mobilevr_sensor_mode, 3); webvr.update(); tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 0.0); ,
<!--
 portrait orientation - use normal rendering and a smoother/slower gyro sensor mode 
-->
set(display.stereo, false); set(webvr.mobilevr_sensor_mode, 1); webvr.update(); tween(layer[webvr_rotate_to_landscape_request].alpha, 1.0); delayedcall(3.0, tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 1.0); ); ); ); , set(lastaspect, 0); );
</action>
<action name="skin_reloadscene_webvr">
delayedcall(0.1,
<!--  if(scene[get(xml.scene)].havevrimage,  -->
loadscene(get(xml.scene), null, MERGE|KEEPVIEW|KEEPMOVING|KEEPHOTSPOTS|NOPREVIEW, BLEND(0.5));
<!--  );  -->
);
</action>
 <!--  VR scene switching hotspots  -->
<style name="webvr_menu_style" depth="800" scale="0.5" distorted="true" ath="0" atv="45" alpha="0.5"/>
<hotspot name="vr_cursor" hsvr="true"/>
<hotspot name="webvr_prev_scene" hsvr="true" url="images/vtourskin.png" keep="true" style="webvr_menu_style" crop="0|64|64|64" ox="-64" onover="tween(scale,0.6);" onout="tween(scale,0.5);" vr_timeout="750" onclick="panoPrevNext(-1);" visible="false" devices="html5.and.webgl"/>
<hotspot name="webvr_next_scene" hsvr="true" url="images/vtourskin.png" keep="true" style="webvr_menu_style" crop="64|64|64|64" ox="+64" onover="tween(scale,0.6);" onout="tween(scale,0.5);" vr_timeout="750" onclick="panoPrevNext(1);" visible="false" devices="html5.and.webgl"/>
 <!--  floating/following VR hotspots  -->
<action name="webvr_menu_following" type="Javascript" devices="html5"><![CDATA[
		var hs1 = krpano.get("hotspot[webvr_prev_scene]");
		var hs2 = krpano.get("hotspot[webvr_next_scene]");
		if(!hs1.hovering && !hs2.hovering)
		{
			var f = 0.01;	// following speed factor
			var h = krpano.view.hlookat;
			var v = krpano.view.vlookat;
			var hsh = hs1.ath;
			var hsv = hs1.atv;
			h   = (h  -(h|0))   + (((h|0)  +360180)%360) - 180.0;
			v   = (v  -(v|0))   + (((v|0)  +360180)%360) - 180.0;
			hsh = (hsh-(hsh|0)) + (((hsh|0)+360180)%360) - 180.0;
			var dh = h - hsh;
			dh += (dh > 180) ? -360 : (dh < -180) ? 360 : 0
			hsh += dh*f;
			var a = Math.abs(v - hsv) / 90.0;
			a = 1.0 * Math.max(1.0 - 2.0*Math.sqrt(a), 0);
			v = v + 55.0 - v*1.5;
			hsv = hsv*(1.0 - f) + v*f;
			hs1.ath = hs2.ath = hsh;
			hs1.atv = hs2.atv = hsv;
			hs1.alpha = hs2.alpha = a;
		}
	]]></action>
 <!--  VR support  -->
</krpano>