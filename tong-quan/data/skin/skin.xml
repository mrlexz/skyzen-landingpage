<krpano >

<include url="skin_phone/layout.xml" devices="mobile"/>
	<include url="skin_phone/layout_desktop.xml" devices="desktop|tablet"/>


	<!-- skin settings (can be overridden in the tour.xml) -->
	<skin_settings maps="false"
	               maps_type="bing"
	               maps_bing_api_key=""
	               maps_google_api_key=""
	               maps_zoombuttons="false"
	               gyro="true"
	               webvr="true"
	               webvr_gyro_keeplookingdirection="false"
	               webvr_prev_next_hotspots="true"
	               littleplanetintro="false"
	               title="true"
	               thumbs="false"
	               thumbs_width="120" thumbs_height="80" thumbs_padding="10" thumbs_crop="0|40|240|160"
	               thumbs_opened="false"
	               thumbs_text="false"
	               thumbs_dragging="true"
	               thumbs_onhoverscrolling="false"
	               thumbs_scrollbuttons="false"
	               thumbs_scrollindicator="false"
	               thumbs_loop="false"
	               tooltips_buttons="false"
	               tooltips_thumbs="false"
	               tooltips_hotspots="false"
	               tooltips_mapspots="false"
	               deeplinking="false"
	               loadscene_flags="MERGE"
	               loadscene_blend="OPENBLEND(0.5, 0.0, 0.75, 0.05, linear)"
	               loadscene_blend_prev="SLIDEBLEND(0.5, 180, 0.75, linear)"
	               loadscene_blend_next="SLIDEBLEND(0.5,   0, 0.75, linear)"
	               loadingtext="loading..."
	               layout_width="100%"
	               layout_maxwidth="814"
	               controlbar_width="-24"
	               controlbar_height="40"
	               controlbar_offset="20"
	               controlbar_offset_closed="-40"
	               controlbar_overlap.no-fractionalscaling="10"
	               controlbar_overlap.fractionalscaling="0"
	               design_skin_images="vtourskin.png"
	               design_bgcolor="0x2D3E50"
	               design_bgalpha="0.8"
	               design_bgborder="0"
	               design_bgroundedge="1"
	               design_bgshadow="0 4 10 0x000000 0.3"
	               design_thumbborder_bgborder="3 0xFFFFFF 1.0"
	               design_thumbborder_padding="2"
	               design_thumbborder_bgroundedge="0"
	               design_text_css="color:#FFFFFF; font-family:Arial;"
	               design_text_shadow="1"
	               />


	<!-- save the url path of this xml file (the url value will be adjusted during xml parsing) -->
	<vtourskinxmlpath url="./" />


	<!-- mouse / touch / keyboard(button) control settings - http://krpano.com/docu/xml/#control -->
	<control mouse="drag"
	         touch="drag"
	         zoomtocursor="false"
	         zoomoutcursor="false"
	         draginertia="0.1"
	         dragfriction="0.9"
	         movetoaccelerate="1.0"
	         movetospeed="10.0"
	         movetofriction="0.8"
	         keybaccelerate="0.09"
	         keybfriction="0.94"
	         keybfovchange="0.25"
	         mousefovchange="1.0"
	         fovspeed="3.0"
	         fovfriction="0.9"
	         bouncinglimits="false"
	         />

	<!-- mouse cursors - http://krpano.com/docu/xml/#cursors -->
	<cursors standard="default"
	         dragging="move"
	         moving="move"
	         />


	<!-- ensure stagescale 2x for mobile devices (regardless if mobilescale is 0.5 or 1.0) -->
	<krpano stagescale="calc:stagescale * 2" if="stagescale LT 1.0" devices="mobile" />


	
	
	
	

	


	<!-- skin styles -->

	<!-- skin_base - the base skin image -->
	<style name="skin_base" url="calc:vtourskinxmlpath.url + skin_settings.design_skin_images" />


	<!-- skin_glow - button glowing (if additional ondown,onup,onout,over events are needed, this style provides ondown2,onup2,onover2,onout2 events) -->
	<style name="skin_glow"
	       ondown="copy(skin_lockglow,name); skin_buttonglow(get(name)); if(ondown2, ondown2() );"
	       onover="if(skin_lockglow === null, copy(skin_lockglow,name); skin_buttonglow(get(name),0.3) ); if(onover2, onover2() );"
	       onout="if(skin_lockglow === name AND !pressed, skin_buttonglow(null);delete(skin_lockglow); ); if(onout2, onout2() );"
	       onup="if(onup2, onup2()); delayedcall(0, if(hovering AND enabled, skin_buttonglow(get(name),0.3); , skin_buttonglow(null);delete(skin_lockglow); ); );"
	       />

	<!-- skin_thumbtext_style - style/textfield for the (optional, skin_settings.thumbs_text) thumbnails texts -->
	<style name="skin_thumbtext_style" type="text" align="bottom" width="100%" y="5" enabled="false" background="false" border="false" css="calc:skin_settings.design_text_css + ' text-align:center; font-size:10px;'" textshadow="get:skin_settings.design_text_shadow" />

	<!-- skin_hotspotstyle - style for the hotspots -->
	<style name="skin_hotspotstyle" url="vtourskin_hotspot.png" scale="0.5" edge="top" distorted="true"
	       tooltip=""
	       linkedscene=""
	       linkedscene_lookat=""
	       onclick="skin_hotspotstyle_click();"
	       onover="tween(scale,0.55);"
	       onout="tween(scale,0.5);"
	       onloaded="if(linkedscene AND skin_settings.tooltips_hotspots, copy(tooltip,scene[get(linkedscene)].title); loadstyle(skin_tooltips); );"
	       />

	<action name="skin_hotspotstyle_click" scope="local">
		if(caller.linkedscene,
			copy(hs_linkedscene, caller.linkedscene);
			if(caller.linkedscene_lookat, txtsplit(caller.linkedscene_lookat, ',', hs_lookat_h, hs_lookat_v, hs_lookat_fov); );
			set(caller.enabled, false);
			skin_hidetooltips();
			tween(caller.depth|caller.alpha|caller.oy|caller.rx, 4000|0.0|-50|-60, 0.5, default,
				skin_loadscene(get(hs_linkedscene), get(skin_settings.loadscene_blend));
				if(hs_lookat_h !== null, skin_lookat(get(hs_lookat_h), get(hs_lookat_v), get(hs_lookat_fov)); );
				skin_updatescroll();
			  );
		  );
	</action>
	

	
	<style name="skin_tooltipss"
	       onover.mouse="if(language==vi,copy(layer[skin_tooltip].html, tooltip_vi);,copy(layer[skin_tooltip].html, tooltip_en););
	                     set(layer[skin_tooltip].visible, true);
	                     tween(layer[skin_tooltip].alpha, 1.0, 0.1);
	                     asyncloop(hovering, copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
	       onout.mouse="tween(layer[skin_tooltip].alpha, 0.0, 0.1, default, set(layer[skin_tooltip].visible,false), copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
	       />

	<!-- skin_tooltip - style for the thumb, hotspot and mapspot tooltips -->
	<style name="skin_tooltips"
	       onover.mouse="if(language == vi,set(layer[skin_tooltip].html, tooltip);,set(layer[skin_tooltip].html, tooltip_en););
	                     set(layer[skin_tooltip].visible, true);
	                     tween(layer[skin_tooltip].alpha, 1.0, 0.1);
	                     asyncloop(hovering, copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
	       onout.mouse="tween(layer[skin_tooltip].alpha, 0.0, 0.1, default, set(layer[skin_tooltip].visible,false), copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
	       />

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	<!-- the tooltip textfield -->
	<layer name="skin_tooltip" keep="true"
	       type="text"
	       parent="STAGE"
	       visible="false" alpha="0" enabled="false" zorder="2"
	       align="lefttop" edge="bottom" oy="200" ox="100" width="auto"
	       background="false" backgroundcolor="0xFFFFFF" backgroundalpha="1.0"
	       border="false" bordercolor="0x000000" borderalpha="1.0" borderwidth="1.0" roundedge="0"
	       shadow="0.0" shadowrange="4.0" shadowangle="45" shadowcolor="0x000000" shadowalpha="1.0"
	       textshadow="get:skin_settings.design_text_shadow" textshadowrange="6.0" textshadowangle="90" textshadowcolor="0x000000" textshadowalpha="1.0"
	       css="calc:skin_settings.design_text_css + ' text-align:center; font-size:16px;'"
	       html=""
	       />


	

	
	<!-- gyro plugin -->
	<plugin name="skin_gyro" keep="true" url="" html5_url="%SWFPATH%/plugins/gyro2.js" softstart="1.0" enabled="false" onavailable="" devices="html5" />


	<!-- skin events -->
	<events name="skin_events" keep="true"
	        onxmlcomplete="set(events[skin_events].onxmlcomplete,null); "
	        onnewpano="skin_showloading(true); skin_update_scene_infos(); skin_deeplinking_update_url();"
	        onremovepano="skin_showloading(true);"
	        onloadcomplete="skin_showloading(false);"
	        onidle="skin_deeplinking_update_url();"
	        onresize="skin_onresize();"
	        onenterfullscreen.fullscreensupport="set(layer[skin_btn_fs].crop, '64|576|64|64');"
	        onexitfullscreen.fullscreensupport="set(layer[skin_btn_fs].crop, '0|576|64|64');"
	        onkeydown="skin_keydown_event();"
	        />


	<!-- skin actions -->
	







	<action name="skin_setup_littleplanetintro">
		copy(lp_scene, xml.scene);
		copy(lp_hlookat, view.hlookat);
		copy(lp_vlookat, view.vlookat);
		copy(lp_fov, view.fov);
		copy(lp_fovmax, view.fovmax);
		copy(lp_limitview, view.limitview);
		set(view.fovmax, 170);
		set(view.limitview, lookto);
		set(view.vlookatmin, 90);
		set(view.vlookatmax, 90);
		lookat(calc(lp_hlookat - 180), 90, 150, 1, 0, 0);
		set(events[lp_events].onloadcomplete,
			delayedcall(0.5,
				if(lp_scene === xml.scene,
					set(control.usercontrol, off);
					copy(view.limitview, lp_limitview);
					set(view.vlookatmin, null);
					set(view.vlookatmax, null);
					tween(view.hlookat|view.vlookat|view.fov|view.distortion, calc('' + lp_hlookat + '|' + lp_vlookat + '|' + lp_fov + '|' + 0.0),
						3.0, easeOutQuad,
						set(control.usercontrol, all);
						tween(view.fovmax, get(lp_fovmax));
						);
				  );
			  );
		  );
	</action>
	
	
	<action name="skin_lookat">
		if(webvr.isenabled,
			<!-- adjust the VR prev/next hotspots for the view change -->
			calc(hlookat_offset, %1 - view.hlookat);
			add(hotspot[webvr_prev_scene].ath, hlookat_offset);
			add(hotspot[webvr_next_scene].ath, hlookat_offset);
		  );
		if(plugin[skin_gyro].enabled,
			<!-- reset the gyro tracking -->
			plugin[skin_gyro].resetsensor(%1);
		  );
		<!-- change the view -->
		lookat(%1, %2, %3);
	</action>


	<action name="skin_onresize">
		mul(mh, area.pixelheight, -1);
		if(layer[skin_thumbs].state == 'opened', add(mh,layer[skin_thumbs].height); );
		
		add(mh, layer[skin_scroll_layer].y_offset);
		set(layer[skin_scroll_layer].y, get(mh));
		
		
	</action>


	<!-- determine the visibility of the buttons and calculate their positions -->


	

	<action name="skin_update_scene_infos">
		if(xml.scene !== null AND scene[get(xml.scene)].index GE 0,

			if(skin_settings.title,
				if(title, txtadd(layer[skin_title].html, get(title), ' - ', get(scene[get(xml.scene)].title) ); , copy(layer[skin_title].html, scene[get(xml.scene)].title ); );
				delayedcall(0.1, set(layer[skin_title].visible,true) );
			  );

			if(skin_settings.thumbs_loop == false,
				if(scene[get(xml.scene)].index GT 0,
					set(layer[skin_btn_prev].enabled, true);
					set(layer[skin_btn_prev].alpha, 1.0);
				  ,
					set(layer[skin_btn_prev].enabled, false);
					set(layer[skin_btn_prev].alpha, 0.3);
				  );

				sub(lastsceneindex, scene.count, 1);
				if(scene[get(xml.scene)].index LT lastsceneindex,
					set(layer[skin_btn_next].enabled, true);
					set(layer[skin_btn_next].alpha, 1.0);
				  ,
					set(layer[skin_btn_next].enabled, false);
					set(layer[skin_btn_next].alpha, 0.3);
				  );
			  ,
				if(scene.count GT 1,
					set(layer[skin_btn_prev].enabled, true);
					set(layer[skin_btn_prev].alpha, 1.0);
					set(layer[skin_btn_next].enabled, true);
					set(layer[skin_btn_next].alpha, 1.0);
				  ,
					set(layer[skin_btn_prev].enabled, false);
					set(layer[skin_btn_prev].alpha, 0.3);
					set(layer[skin_btn_next].enabled, false);
					set(layer[skin_btn_next].alpha, 0.3);
				  );
			  );

			if(scene.count GT 1,
				set(layer[skin_btn_prev_fs].visible, true);
				set(layer[skin_btn_next_fs].visible, true);
			  ,
				set(layer[skin_btn_prev_fs].visible, false);
				set(layer[skin_btn_next_fs].visible, false);
			  );

			txtadd(parentname, 'skin_thumb_', get(scene[get(xml.scene)].index));
			if(layer[get(parentname)],
				set(layer[skin_thumbborder].parent, get(parentname));
				set(layer[skin_thumbborder].visible, true);
			  ,
				set(layer[skin_thumbborder].visible, false);
			  );

			

			if(plugin[skin_gyro].isavailable == true AND view.vlookatrange == 180,
				set(layer[skin_btn_gyro].visible, true);
			  ,
				set(layer[skin_btn_gyro].visible, false)
			  );

			if(view.vlookatrange LT 180,
				if(backup_control_bouncinglimits === null,
					copy(backup_control_bouncinglimits, control.bouncinglimits);
				  );
				set(control.bouncinglimits, false);
			  ,
				if(backup_control_bouncinglimits !== null,
					copy(control.bouncinglimits, backup_control_bouncinglimits);
				  );
			  );

			
		  );
	</action>


	<action name="skin_gotoscene">
		if(scene[%1],
			copy(cursceneindex, scene[get(xml.scene)].index);
			copy(newsceneindex, scene[%1].index);
			skin_loadscene(get(newsceneindex), calc(newsceneindex LT cursceneindex ? skin_settings.loadscene_blend_prev : (newsceneindex GT cursceneindex ? skin_settings.loadscene_blend_next : skin_settings.loadscene_blend)) );
		  );
	</action>


	<action name="skin_nextscene">
		add(newsceneindex, scene[get(xml.scene)].index, %1);
		if(newsceneindex GE 0 AND newsceneindex LT scene.count,
			skin_loadscene(get(newsceneindex), calc(%1 LT 0 ? skin_settings.loadscene_blend_prev : skin_settings.loadscene_blend_next));
		  );
	</action>


	<action name="skin_nextscene_loop">
		add(newsceneindex, scene[get(xml.scene)].index, %1);
		sub(lastsceneindex, scene.count, 1);
		if(newsceneindex LT 0, copy(newsceneindex,lastsceneindex));
		if(newsceneindex GT lastsceneindex, set(newsceneindex,0));
		skin_loadscene(get(newsceneindex), calc(%1 LT 0 ? skin_settings.loadscene_blend_prev : skin_settings.loadscene_blend_next));
	</action>


	<!-- skin_loadscene(scenenameorindex, blendmode) -->
	<action name="skin_loadscene">
		
		
		loadscene(get(scene[%1].name), null, get(skin_settings.loadscene_blend), %2);
	</action>


	<action name="skin_showloading">
		if(display.stereo == true,
			set(layer[skin_loadingtext].visible, false);
		  ,
			set(layer[skin_loadingtext].visible, %1);
		  );
	</action>


	<action name="skin_hidetooltips">
		set(layer[skin_tooltip].alpha,0.0);
		set(layer[skin_tooltip].visible,false);
	</action>


	<action name="skin_buttonglow">
		if('%1' !== 'null',
			set(strength,0.7);
			if(%2 != null, set(strength,%2));
			set(layer[skin_buttonglow].parent, %1);
			set(layer[skin_buttonglow].visible, true);
			tween(layer[skin_buttonglow].alpha, get(strength), 0.07);
		  ,
			tween(layer[skin_buttonglow].alpha, 0.0, 0.1, default,
				set(layer[skin_buttonglow].parent, null);
				set(layer[skin_buttonglow].visible, false);
			  );
		  );
	</action>


	<action name="skin_calc_opened_closed">
		if(layer[get(name)].y_closed === null,
			set(layer[get(name)].y_opened, get(layer[get(name)].y));
			set(layer[get(name)].y_closed, calc(layer[get(name)].y - skin_settings.controlbar_offset - skin_settings.controlbar_height + skin_settings.controlbar_offset_closed));
		  );
	</action>


	<action name="skin_hideskin">
		callwith(layer[skin_scroll_window],   skin_calc_opened_closed() );
		callwith(layer[skin_splitter_bottom], skin_calc_opened_closed() );
		callwith(layer[skin_control_bar],     skin_calc_opened_closed() );

		
		if(layer[skin_thumbs].state != 'closed', skin_showthumbs(false); wait(0.25); );

		set(hidetime, calc('%1' == 'instant' ? 0.0 : 0.5));
		tween(layer[skin_scroll_window].y,   get(layer[skin_scroll_window  ].y_closed), get(hidetime));
		tween(layer[skin_splitter_bottom].y, get(layer[skin_splitter_bottom].y_closed), get(hidetime));
		tween(layer[skin_control_bar].y,     get(layer[skin_control_bar    ].y_closed), get(hidetime));

		tween(layer[skin_btn_prev_fs].x, 0, get(hidetime));
		tween(layer[skin_btn_next_fs].x, 0, get(hidetime));

		if(layer[skin_logo], tween(layer[skin_logo].alpha, 0.0, 0.5, default, set(layer[skin_logo].visible,false)); );

		stopdelayedcall(skin_btn_show_alpha);
		set(layer[skin_btn_show].visible, true);
		delayedcall(skin_btn_show_alpha, get(hidetime), tween(layer[skin_btn_show].alpha, 0.25, 0.25); );
	</action>


	<action name="skin_showskin">
		tween(layer[skin_scroll_window  ].y, get(layer[skin_scroll_window  ].y_opened));
		tween(layer[skin_splitter_bottom].y, get(layer[skin_splitter_bottom].y_opened));
		tween(layer[skin_control_bar    ].y, get(layer[skin_control_bar    ].y_opened));

		tween(layer[skin_btn_prev_fs].x, -50);
		tween(layer[skin_btn_next_fs].x, -50);

		if(layer[skin_logo], set(layer[skin_logo].visible,true); tween(layer[skin_logo].alpha, 1.0); );

		stopdelayedcall(skin_btn_show_alpha);
		set(layer[skin_btn_show].visible, false);
		delayedcall(skin_btn_show_alpha, 0.25, tween(layer[skin_btn_show].alpha, 0.0, 0.0); );
	</action>


	<action name="skin_showthumbs">
		if(%1 == null, if(layer[skin_thumbs].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );
		mul(mh, layer[skin_scroll_layer].pixelheight, -1);
		if(show,
			set(layer[skin_thumbs].state, 'opened');
			tween(layer[skin_thumbs].alpha, 1.0, 0.25);
			add(mh, layer[skin_thumbs].height);
			add(mh, layer[skin_scroll_layer].y_offset);
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);
			set(layer[skin_thumbs_container].visible, true);
			tween(layer[skin_thumbs_container].alpha, 1.0, 0.25);
			
		  ,
			set(layer[skin_thumbs].state, 'closed');
			tween(layer[skin_thumbs].alpha, 0.0, 0.25, easeOutQuint);
			add(mh, layer[skin_scroll_layer].y_offset);
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_thumbs_container].visible, false););
		  );
	</action>


	


	<action name="skin_keydown_event">
		if(keycode == 33, skin_nextscene_loop(-1) );            	<!-- Page Up   - previous scene -->
		if(keycode == 34, skin_nextscene_loop(+1) );            	<!-- Page Dowm - next scene -->
		if(keycode == 35, skin_gotoscene(calc(scene.count-1)) );	<!-- End       - last scene -->
		if(keycode == 36, skin_gotoscene(0) );                  	<!-- Home/Pos1 - first scene -->
	</action>


	<action name="skin_deeplinking_update_url">
		if(skin_settings.deeplinking AND (!webvr OR webvr.isenabled === false),
			delayedcall(skin_deeplinking_update, calc(%1 == null ? 0.1 : %1), skin_deeplinking_update_url_process() );
		  );
	</action>

	<action name="skin_deeplinking_update_url_process">
		copy(adr, browser.location);
		indexoftxt(qi, get(adr), '?');
		if(qi GT 0, subtxt(adr, adr, 0, get(qi)));
		copy(si, scene[get(xml.scene)].index);
		copy(h, view.hlookat);
		copy(v, view.vlookat);
		copy(f, view.fov);
		copy(d, view.distortion);
		copy(a, view.architectural);
		clamp(d, 0.0, 1.0);
		clamp(a, 0.0, 1.0);
		set(pp, calc(f LT 10 ? 6 : 2));
		roundval(h, get(pp));
		roundval(v, get(pp));
		roundval(f, get(pp));
		roundval(d, 2);
		roundval(a, 1);
		set(adr, calc(adr + '?startscene=' + si + '&amp;startactions=lookat('+h+','+v+','+f+','+d+','+a+');'));
		js( history.replaceState(null, document.title, get(adr)); );
	</action>


	<!-- reload the scene when there is a special image for VR -->
	<action name="skin_reloadscene_webvr">
		delayedcall(0.1,
			if(scene[get(xml.scene)].havevrimage,
				copy(keeplookingdirection_backup, skin_settings.webvr_gyro_keeplookingdirection);
				set(skin_settings.webvr_gyro_keeplookingdirection, true);
				loadscene(get(xml.scene), null, MERGEKEEPPLUGINS|KEEPHOTSPOTS|NOPREVIEW, BLEND(0.5));
				copy(skin_settings.webvr_gyro_keeplookingdirection, keeplookingdirection_backup);
				delete(keeplookingdirection_backup);
			  );
		  );
	</action>

<action name = "go_home">
        adjusthlookat(get(save_hlookat));
        tween(view.hlookat,get(save_hlookat),1);
        tween(view.vlookat,get(save_vlookat),1);
        tween(view.fov,get(save_fov),1);
        tween(view.fovmax,get(save_fovmax),1);
        tween(view.fisheye,get(save_fisheye),1);
        tween(view.architectural,get(save_architectural),1);
    </action>
	


	<!-- context menu - http://krpano.com/docu/xml/#contextmenu -->
	<contextmenu fullscreen="false" versioninfo="false"  background="true" backgroundcolor="0xFF9900">
		 
	</contextmenu>

<action name="skin_changecontrolmode">switch(control.mouse, moveto, drag);

    switch(control.touch, moveto, drag);</action>

  <action name="skin_view_look_straight">if(view.vlookat LT -80 OR view.vlookat GT +80,

    tween(view.vlookat, 0.0, 1.0, easeInOutSine);

    tween(view.fov,     100, distance(150,0.8));

    );

    skin_deeplinking_update_url(1.0);</action>

  <action name="skin_view_normal">skin_view_look_straight();

    tween(view.architectural, 0.0, distance(1.0,0.5));

    tween(view.pannini,       0.0, distance(1.0,0.5));

    tween(view.distortion,    0.0, distance(1.0,0.5));</action>

  <action name="skin_view_fisheye">skin_view_look_straight();

    tween(view.architectural, 0.0,  distance(1.0,0.5));

    tween(view.pannini,       0.0,  distance(1.0,0.5));

    tween(view.distortion,    0.35, distance(1.0,0.5));</action>

  <action name="skin_view_architectural">skin_view_look_straight();

    tween(view.architectural, 1.0, distance(1.0,0.5));

    tween(view.pannini,       0.0, distance(1.0,0.5));

    tween(view.distortion,    0.0, distance(1.0,0.5));</action>

  <action name="skin_view_stereographic">skin_view_look_straight();

    tween(view.architectural, 0.0, distance(1.0,0.5));

    tween(view.pannini,       0.0, distance(1.0,0.5));

    tween(view.distortion,    1.0, distance(1.0,0.8));</action>

  <action name="skin_view_pannini">skin_view_look_straight();

    tween(view.architectural, 0.0, distance(1.0,0.5));

    tween(view.pannini,       1.0, distance(1.0,0.8));

    if(view.distortion LT 0.1,

    tween(view.distortion, 1.0, distance(1.0,0.8));

    );</action>

  <action name="view_littleplanet">
	  
	  set(v_hlookat, 90);

    tween(view.architectural, 0.0, distance(1.0,0.5));

    tween(view.pannini,       0.0, distance(1.0,0.5));

    tween(view.distortion,    1.0, distance(1.0,0.8));

    tween(view.fov,           150, distance(150,0.8));

    tween(view.vlookat, get(v_hlookat), distance(100,0.8));

    
    add(new_hlookat, view.hlookat, 123.0);

    tween(view.hlookat, get(new_hlookat), distance(100,0.8));
	
	</action>

  <action name="skin_view_littlesky">
	  
	  
	  set(v_hlookat, -90);	

    tween(view.architectural, 0.0, distance(1.0,0.5));

    tween(view.pannini,       0.0, distance(1.0,0.5));

    tween(view.distortion,    1.0, distance(1.0,0.8));

    tween(view.fov,           150, distance(150,0.8));

    tween(view.vlookat, get(v_hlookat), distance(100,0.8));

    

    add(new_hlookat, view.hlookat, 123.0);

    tween(view.hlookat, get(new_hlookat), distance(100,0.8));
	
	</action>
</krpano>
